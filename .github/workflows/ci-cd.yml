name: CI/CD Pipeline
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  schedule:
    # Nightly check at 2 AM UTC to detect package/CVE changes; only build if needed
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE: nishaero/trixie-slim

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: read

jobs:
  # Gatekeeper: decide whether to run build based on Dockerfile package changes or new CVEs
  changes-gate:
    name: Detect package or vulnerability changes
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.decide.outputs.should_build }}
      reason: ${{ steps.decide.outputs.reason }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Derive comparison base
        id: base
        run: |
          set -euo pipefail
          # Determine a reasonable base ref for comparison
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "ref=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "ref=${{ github.event.before }}" >> $GITHUB_OUTPUT
          else
            # For schedule/workflow_dispatch, compare against the last successful run on main (or previous commit)
            echo "ref=$(git rev-parse HEAD~1 || echo HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: Extract Dockerfile package spec snapshot (current)
        id: pkgs_now
        run: |
          set -euo pipefail
          # Capture package install lines; normalize whitespace and sort
          awk '/apt-get\s+update/ || /apt-get\s+install/ || /install_packages/ || /apk\s+add/ {print}' Dockerfile \
            | sed -E 's/\\s+/ /g;s/\\s*\\$//g' \
            | tr 'A-Z' 'a-z' \
            | sed -E 's/--no-install-recommends//g;s/-y//g;s/--no-cache//g' \
            | tr ' ' '\n' \
            | grep -E '^[a-z0-9._+-]+$' \
            | sort -u > .pkglist.now
          echo "count=$(wc -l < .pkglist.now | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Extract Dockerfile package spec snapshot (base)
        id: pkgs_base
        run: |
          set -euo pipefail
          git show "${{ steps.base.outputs.ref }}:Dockerfile" > /tmp/Dockerfile.base || cp Dockerfile /tmp/Dockerfile.base
          awk '/apt-get\s+update/ || /apt-get\s+install/ || /install_packages/ || /apk\s+add/ {print}' /tmp/Dockerfile.base \
            | sed -E 's/\\s+/ /g;s/\\s*\\$//g' \
            | tr 'A-Z' 'a-z' \
            | sed -E 's/--no-install-recommends//g;s/-y//g;s/--no-cache//g' \
            | tr ' ' '\n' \
            | grep -E '^[a-z0-9._+-]+$' \
            | sort -u > .pkglist.base
          echo "count=$(wc -l < .pkglist.base | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Diff package lists
        id: pkgdiff
        run: |
          set -euo pipefail
          comm -3 .pkglist.base .pkglist.now | sed -E 's/^\t?//' > .pkglist.diff || true
          echo "changed=$(test -s .pkglist.diff && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "diff=$(cat .pkglist.diff | tr '\n' ' ' | sed 's/ \+$//')" >> $GITHUB_OUTPUT

      - name: Quick CVE delta check with Trivy DB
        id: cvedelta
        run: |
          set -euo pipefail
          # Build a minimal local image to scan only when necessary context exists
          echo "FROM scratch" > /tmp/min.Dockerfile
          # When we have an image context, prefer filesystem scan; we still do fs scan on repo
          echo "{}" > /tmp/empty.json
          # Update Trivy DB and scan repository fs for new HIGH/CRITICAL CVEs compared to base commit
          pipename=$(mktemp -u)
          echo "::group::Trivy FS scan (current)"; true
          docker run --rm -v "$PWD:/repo" -w /repo aquasec/trivy:0.54.1 fs --scanners vuln --security-checks vuln \
            --severity HIGH,CRITICAL --format json --skip-dirs .git --output trivy-now.json . || true
          echo "::endgroup::"; true
          git checkout "${{ steps.base.outputs.ref }}" -- . >/dev/null 2>&1 || true
          echo "::group::Trivy FS scan (base)"; true
          docker run --rm -v "$PWD:/repo" -w /repo aquasec/trivy:0.54.1 fs --scanners vuln --security-checks vuln \
            --severity HIGH,CRITICAL --format json --skip-dirs .git --output trivy-base.json . || true
          echo "::endgroup::"; true
          # Compute naive delta based on counts
          NOW_CNT=$(jq '[.Results[]?.Vulnerabilities[]?] | length' trivy-now.json 2>/dev/null || echo 0)
          BASE_CNT=$(jq '[.Results[]?.Vulnerabilities[]?] | length' trivy-base.json 2>/dev/null || echo 0)
          if [ "$NOW_CNT" -lt "$BASE_CNT" ]; then
            echo "newfix=true" >> $GITHUB_OUTPUT
          else
            echo "newfix=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Decide if build should run
        id: decide
        run: |
          set -euo pipefail
          SHOULD=false
          REASON="No package changes and no new CVE fixes detected"
          if [ "${{ steps.pkgdiff.outputs.changed }}" = "true" ]; then
            SHOULD=true
            REASON="Dockerfile package list changed: ${{ steps.pkgdiff.outputs.diff }}"
          elif [ "${{ steps.cvedelta.outputs.newfix }}" = "true" ]; then
            SHOULD=true
            REASON="Fewer HIGH/CRITICAL CVEs than base â€” presumed new fixes"
          fi
          echo "should_build=$SHOULD" >> $GITHUB_OUTPUT
          echo "reason=$REASON" >> $GITHUB_OUTPUT
          echo "Decision: $SHOULD ($REASON)"

  # Code quality: shfmt formatting and ShellCheck linting for any shell scripts and Dockerfile scripts
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: [changes-gate]
    if: >-
      ${{ github.event_name != 'schedule' || needs.changes-gate.outputs.should-build == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install shfmt and shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shfmt shellcheck
      - name: Find shell scripts
        id: files
        run: |
          echo "files=$(git ls-files | grep -E '\\.(sh|bash)$|/usr/local/bin/install_packages$' || true)" >> $GITHUB_OUTPUT
      - name: Run shfmt (check only)
        if: steps.files.outputs.files != ''
        run: |
          echo "$FILES" | tr ' ' '\n' | xargs -r shfmt -i 2 -d
        env:
          FILES: ${{ steps.files.outputs.files }}
      - name: Run ShellCheck
        if: steps.files.outputs.files != ''
        run: |
          echo "$FILES" | tr ' ' '\n' | xargs -r shellcheck -x
        env:
          FILES: ${{ steps.files.outputs.files }}

  # SAST Scan with Hadolint for Dockerfile
  dockerfile-lint:
    name: Dockerfile SAST Scan
    runs-on: ubuntu-latest
    needs: [changes-gate]
    if: >-
      ${{ github.event_name != 'schedule' || needs.changes-gate.outputs.should-build == 'true' }}
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true
      - name: Upload Hadolint SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint

  # Build and Scan Docker Image (guarded by changes-gate on schedules)
  build-and-scan:
    name: Build, SAST, and DAST Scans
    runs-on: ubuntu-latest
    needs: [changes-gate, lint, dockerfile-lint]
    if: >-
      ${{ github.event_name != 'schedule' || needs.changes-gate.outputs.should-build == 'true' }}
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write  # for keyless cosign
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-ref: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Announce decision
        run: |
          echo "Gate reason: ${{ needs.changes-gate.outputs.reason }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
        continue-on-error: true
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            # Only set semver tags when the ref is a valid semver tag (vX.Y.Z)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Use commit SHA tag without any potentially blank prefix
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule,pattern=nightly-{{date 'YYYYMMDD'}}
      - name: Build Docker image for testing
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Tag image for scanning
        run: |
          docker tag $(echo "${{ steps.meta.outputs.tags }}" | head -n1) "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
      - name: Run Trivy filesystem SAST scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload Trivy SAST results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-fs'
      - name: Run Trivy image DAST scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload Trivy DAST results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-image'
      - name: Run Dockle container linter
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest \
            --exit-code 0 \
            --format json \
            --output dockle-results.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        continue-on-error: true
      - name: Upload Dockle results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dockle-results
          path: dockle-results.json
      - name: Test image functionality (runtime checks)
        run: |
          set -euo pipefail
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag $(echo "${{ steps.meta.outputs.tags }}" | head -n1) "$IMAGE" || true
          uid=$(docker run --rm "$IMAGE" id -u)
          if [ "$uid" = "0" ]; then echo "Image runs as root!"; exit 1; fi
          pid1=$(docker run --rm "$IMAGE" ps -o pid,comm --no-headers | awk 'NR==1{print $2}')
          if [ "$pid1" != "tini" ]; then echo "tini is not PID1 ($pid1)!"; exit 1; fi
          out=$(docker run --rm "$IMAGE" /bin/bash -lc 'echo $LANG $LC_ALL && locale -a | grep -i en_US.utf8')
          echo "$out"
          docker run --rm --user 0 "$IMAGE" /bin/bash -lc 'install_packages jq && command -v jq && [ -z "$(ls -A /var/lib/apt/lists 2>/dev/null)" ]'
          docker run --rm "$IMAGE" curl -fsSL https://example.com >/dev/null
          echo "Runtime checks passed"
      - name: Build and push multi-arch Docker images (Docker Hub, semver-only)
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ env.DOCKERHUB_IMAGE }}:latest
            ${{ env.DOCKERHUB_IMAGE }}:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
