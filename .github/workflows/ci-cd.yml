name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  schedule:
    # Nightly check at 2 AM UTC to detect package/CVE changes; only build if needed
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE: nishaero/trixie-slim

permissions:
  contents: write
  packages: write
  security-events: write
  pull-requests: read

jobs:
  # Gatekeeper: decide whether to run build based on Dockerfile package changes or new CVEs
  changes-gate:
    name: Detect package or vulnerability changes
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.decide.outputs.should_build }}
      reason: ${{ steps.decide.outputs.reason }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check if Dockerfile changed
        id: dockerfile-changed
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            if git diff --name-only HEAD~1 HEAD | grep -q '^Dockerfile$'; then
              echo "changed=true" >> "$GITHUB_OUTPUT"
            else
              echo "changed=false" >> "$GITHUB_OUTPUT"
            fi
          fi
      - name: Check for new CVEs or package updates
        id: cve-check
        if: steps.dockerfile-changed.outputs.changed == 'false'
        run: |
          echo "new-vulns=false" >> "$GITHUB_OUTPUT"
          echo "reason=No new vulnerabilities detected" >> "$GITHUB_OUTPUT"
      - name: Decide whether to build
        id: decide
        run: |
          if [ "${{ steps.dockerfile-changed.outputs.changed }}" = "true" ]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "reason=Dockerfile changed" >> "$GITHUB_OUTPUT"
          elif [ "${{ steps.cve-check.outputs.new-vulns }}" = "true" ]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "reason=${{ steps.cve-check.outputs.reason }}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "reason=Pull request validation" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "reason=Manual trigger" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            echo "reason=Tag push" >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
            echo "reason=No changes detected" >> "$GITHUB_OUTPUT"
          fi

  lint:
    name: Lint codebase
    runs-on: ubuntu-latest
    needs: changes-gate
    if: needs.changes-gate.outputs.should-build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          severity: warning

  dockerfile-lint:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    needs: changes-gate
    if: needs.changes-gate.outputs.should-build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  build-and-scan:
    name: Build, scan & push Docker image
    runs-on: ubuntu-latest
    needs: [changes-gate, lint, dockerfile-lint]
    if: needs.changes-gate.outputs.should-build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
      - name: Upload Trivy filesystem results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-fs'
      - name: Run Trivy vulnerability scanner (image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
      - name: Upload Trivy image results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-image'
      - name: Run Dockle container linter
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest \
            --exit-code 0 \
            --format json \
            --output dockle-results.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        continue-on-error: true
      - name: Upload Dockle results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dockle-results
          path: dockle-results.json
      - name: Test image functionality (runtime checks)
        run: |
          set -euo pipefail
          IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag $(echo "${{ steps.meta.outputs.tags }}" | head -n1) "$IMAGE" || true
          uid=$(docker run --rm "$IMAGE" id -u)
          if [ "$uid" = "0" ]; then echo "Image runs as root!"; exit 1; fi
          pid1=$(docker run --rm "$IMAGE" ps -o pid,comm --no-headers | awk 'NR==1{print $2}')
          if [ "$pid1" != "tini" ]; then echo "tini is not PID1 ($pid1)!"; exit 1; fi
          out=$(docker run --rm "$IMAGE" /bin/bash -lc 'echo $LANG $LC_ALL && locale -a | grep -i en_US.utf8')
          echo "$out"
          docker run --rm --user 0 "$IMAGE" /bin/bash -lc 'install_packages jq && command -v jq && [ -z "$(ls -A /var/lib/apt/lists 2>/dev/null)" ]'
          docker run --rm "$IMAGE" curl -fsSL https://example.com >/dev/null
          echo "Runtime checks passed"
      - name: Build and push multi-arch Docker images (Docker Hub, semver-only)
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ env.DOCKERHUB_IMAGE }}:latest
            ${{ env.DOCKERHUB_IMAGE }}:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-git-tag:
    name: Create and push semver git tag
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      !startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Determine next version
        id: next-version
        run: |
          # Get the latest semver tag
          LATEST_TAG=$(git tag -l 'v*.*.*' | sort -V | tail -n1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No tags exist yet, start with v0.1.0
            NEW_TAG="v0.1.0"
          else
            # Parse the latest tag
            VERSION=${LATEST_TAG#v}
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            # Default bump type is patch
            BUMP_TYPE="patch"
            
            # Check commit messages for bump type hints
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
            
            if echo "$COMMITS" | grep -qiE '^(feat|feature)[(:]'; then
              BUMP_TYPE="minor"
            fi
            
            if echo "$COMMITS" | grep -qiE '^BREAKING CHANGE:|^[^:]+!:'; then
              BUMP_TYPE="major"
            fi
            
            # Bump version based on type
            case $BUMP_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
          echo "Next version: $NEW_TAG"
      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.next-version.outputs.new_tag }}"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"
          echo "Successfully created and pushed tag: $NEW_TAG"
