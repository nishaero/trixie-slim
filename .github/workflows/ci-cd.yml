name: CI/CD Pipeline
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*'
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE: nishaero/trixie-slim
permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: read
jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install shfmt and shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shfmt shellcheck
      - name: Find shell scripts
        id: files
        run: |
          echo "files=$(git ls-files | grep -E '\\.(sh|bash)$|/usr/local/bin/install_packages$' || true)" >> $GITHUB_OUTPUT
      - name: Run shfmt (check only)
        if: steps.files.outputs.files != ''
        run: |
          echo "$FILES" | tr ' ' '\n' | xargs -r shfmt -i 2 -d
        env:
          FILES: ${{ steps.files.outputs.files }}
      - name: Run ShellCheck
        if: steps.files.outputs.files != ''
        run: |
          echo "$FILES" | tr ' ' '\n' | xargs -r shellcheck -x
        env:
          FILES: ${{ steps.files.outputs.files }}
  dockerfile-lint:
    name: Dockerfile SAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true
      - name: Upload Hadolint SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint
  build-and-scan:
    name: Build, SAST, and DAST Scans
    runs-on: ubuntu-latest
    needs: [lint, dockerfile-lint]
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
    outputs:
      published-tags: ${{ steps.filter-tags.outputs.published_tags }}
      built-image: ${{ steps.build.outputs.imageid }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata (full)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.DOCKERHUB_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=sha,format=short
      - name: Determine final publishable tags (latest and semver only)
        id: filter-tags
        run: |
          set -euo pipefail
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          publish_tags=()
          for t in "${TAGS[@]}"; do
            if [[ "$t" =~ :latest$ ]]; then
              publish_tags+=("$t")
            elif [[ "$t" =~ :(v?[0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
              publish_tags+=("$t")
            elif [[ "$t" =~ :(v?[0-9]+\.[0-9]+)$ ]]; then
              publish_tags+=("$t")
            elif [[ "$t" =~ :(v?[0-9]+)$ ]]; then
              publish_tags+=("$t")
            fi
          done
          printf '%s' "published_tags=${publish_tags[*]}" | sed 's/ /,/g' >> $GITHUB_OUTPUT
          echo "Filtered publishable tags:"; printf '%s\n' "${publish_tags[@]}"
      - name: Build Docker image for testing (no push)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Run Trivy filesystem SAST scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload Trivy SAST results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-fs'
      - name: Run Trivy image DAST scan
        id: trivy-image
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'image'
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Ensure Trivy image SARIF exists (fallback)
        if: always()
        run: |
          [ -f trivy-image-results.sarif ] || echo '{"version":"2.1.0","runs":[]}' > trivy-image-results.sarif
      - name: Upload Trivy DAST results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-image'
      - name: Run Dockle container linter
        id: dockle
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest \
            --exit-code 0 \
            --format json \
            --output dockle-results.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        continue-on-error: true
      - name: Ensure Dockle JSON exists (fallback)
        if: always()
        run: |
          [ -f dockle-results.json ] || echo '{}' > dockle-results.json
      - name: Upload Dockle results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dockle-results
          path: dockle-results.json
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
        continue-on-error: true
      - name: Build and push multi-arch images (only latest/semver, no branch/SHA)
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.filter-tags.outputs.published_tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Install cosign
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: sigstore/cosign-installer@v3.5.0
      - name: Sign published tags only
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        env:
          COSIGN_EXPERIMENTAL: 'true'
          COSIGN_YES: 'true'
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          set -euo pipefail
          echo "${{ steps.filter-tags.outputs.published_tags }}" | tr ',' '\n' | while read -r TAG; do
            [ -z "$TAG" ] && continue
            if echo "$TAG" | grep -q '^ghcr.io\|^nishaero/'; then
              echo "Signing $TAG"
              if [ -n "${COSIGN_PRIVATE_KEY:-}" ]; then
                echo "$COSIGN_PRIVATE_KEY" | base64 -d > cosign.key
                cosign sign --key cosign.key "$TAG"
                rm -f cosign.key
              else
                cosign sign "$TAG"
              fi
            fi
          done
      - name: Generate SBOM for pushed image (use one published tag)
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || 'latest' }}
          format: spdx-json
          output-file: sbom.spdx.json
      - name: Upload SBOM
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
  validate-published-image:
    name: Validate Published Image (Security & Features)
    runs-on: ubuntu-latest
    needs: [build-and-scan]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      id-token: write
      security-events: write
    steps:
      - name: Determine pull tag
        id: pulltag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=" >> $GITHUB_OUTPUT
          fi
      - name: Log in to GHCR (read)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.5.0
      - name: Verify cosign signature (GHCR)
        env:
          COSIGN_EXPERIMENTAL: 'true'
        run: |
          set -euxo pipefail
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pulltag.outputs.tag }}"
          cosign verify "$IMG" --certificate-identity-regexp ".*" --certificate-oidc-issuer-regexp ".*"
      - name: Pull image from GHCR
        run: |
          set -euxo pipefail
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pulltag.outputs.tag }}"
          docker pull "$IMG"
      - name: Run Trivy image scan (published)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pulltag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-image-published.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      - name: Upload Trivy (published) to Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-published.sarif'
          category: 'trivy-image-published'
      - name: Run Dockle on published image
        id: dockle-pub
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            goodwithtech/dockle:latest \
            --exit-code 0 \
            --format json \
            --output dockle-published.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pulltag.outputs.tag }}
        continue-on-error: true
      - name: Ensure Dockle (published) JSON exists (fallback)
        if: always()
        run: |
          [ -f dockle-published.json ] || echo '{}' > dockle-published.json
      - name: Upload Dockle (published) results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dockle-published
          path: dockle-published.json
      - name: Runtime feature validation (published)
        run: |
          set -euo pipefail
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.pulltag.outputs.tag }}"
          uid=$(docker run --rm "$IMG" id -u)
          if [ "$uid" = "0" ]; then echo "Image runs as root!"; exit 1; fi
          pid1=$(docker run --rm "$IMG" ps -o pid,comm --no-headers | awk 'NR==1{print $2}')
          if [ "$pid1" != "tini" ]; then echo "tini is not PID1 ($pid1)!"; exit 1; fi
          docker run --rm "$IMG" /bin/bash -lc 'locale -a | grep -i en_US.utf8'
          docker run --rm --user 0 "$IMG" /bin/bash -lc 'install_packages jq && command -v jq && [ -z "$(ls -A /var/lib/apt/lists 2>/dev/null)" ]'
          docker run --rm "$IMG" curl -fsSL https://example.com >/dev/null
          echo "Published image validation passed"
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, dockerfile-lint, build-and-scan, validate-published-image]
    if: always()
    steps:
      - name: Report
        run: |
          echo "## CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Format: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dockerfile Lint: ${{ needs.dockerfile-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build and Scan: ${{ needs.build-and-scan.result }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "- Validate Published Image: ${{ needs.validate-published-image.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Validate Published Image: skipped (PR/non-tag build)" >> $GITHUB
