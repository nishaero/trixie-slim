name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  schedule:
    # Nightly check at 2 AM UTC to detect package/CVE changes; only build if needed
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_IMAGE: nishaero/trixie-slim

permissions:
  contents: write
  packages: write
  security-events: write
  pull-requests: read

jobs:
  # Gatekeeper: decide whether to run build based on Dockerfile package changes or new CVEs
  changes-gate:
    name: Detect package or vulnerability changes
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.decide.outputs.should_build }}
      reason: ${{ steps.decide.outputs.reason }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch at least 2 commits for diff

      - name: Decide whether to build
        id: decide
        run: |
          SHOULD_BUILD="false"
          REASON="No build trigger detected"
          
          # Check if Dockerfile or workflow changed
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -qE '^(Dockerfile|\.github/workflows/)'; then
              SHOULD_BUILD="true"
              REASON="Dockerfile or workflow changed (PR)"
            fi
          elif git diff --name-only HEAD~1 HEAD | grep -qE '^(Dockerfile|\.github/workflows/)'; then
            SHOULD_BUILD="true"
            REASON="Dockerfile or workflow changed"
          fi
          
          # Check for manual trigger or tag push
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.event_name }}" == "schedule" ]]; then
            SHOULD_BUILD="true"
            REASON="Manual trigger or scheduled run"
          fi
          
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            SHOULD_BUILD="true"
            REASON="Tag push detected"
          fi
          
          echo "should_build=$SHOULD_BUILD" >> "$GITHUB_OUTPUT"
          echo "reason=$REASON" >> "$GITHUB_OUTPUT"
          echo "Build decision: $SHOULD_BUILD (Reason: $REASON)"

  # Lint codebase with Super-Linter
  lint:
    name: Lint codebase
    needs: changes-gate
    if: needs.changes-gate.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better linting

      - name: Run Super-Linter
        uses: super-linter/super-linter@v7
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_DOCKERFILE_HADOLINT: false

  # Lint Dockerfile with Hadolint (strict)
  dockerfile-lint:
    name: Lint Dockerfile
    needs: changes-gate
    if: needs.changes-gate.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  # Main CI/CD: build, scan, and conditionally push
  build-and-scan:
    name: Build, scan & push Docker image
    needs: [changes-gate, lint, dockerfile-lint]
    if: needs.changes-gate.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Trivy filesystem scan (always runs)
      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      - name: Upload Trivy filesystem results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-results.sarif'

      # Trivy image scan (may fail if image not immediately available)
      - name: Run Trivy vulnerability scanner (image)
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image results to GitHub Security tab
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

      # Dockle container linter
      - name: Run Dockle container linter
        continue-on-error: true
        uses: erzz/dockle-action@v1
        with:
          image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          exit-code: '1'
          exit-level: WARN

      - name: Upload Dockle results
        continue-on-error: true
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dockle-results
          path: dockle-results.json
          retention-days: 5

      # Test image functionality
      - name: Test image functionality (runtime checks)
        run: |
          IMAGE=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          
          # Basic smoke test
          docker run --rm "$IMAGE" whoami
          docker run --rm "$IMAGE" bash -c 'echo "Container works!"'
          
          # Test install_packages utility
          docker run --rm "$IMAGE" bash -c 'command -v install_packages'

      # Build and push multi-arch images (only for semver tags)
      - name: Build and push multi-arch Docker images (Docker Hub, semver-only)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKERHUB_IMAGE }}:${{ steps.meta.outputs.version }}
            ${{ env.DOCKERHUB_IMAGE }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Auto-tag: Create semantic version git tag after successful build
  create-git-tag:
    name: Create and push semver git tag
    needs: [build-and-scan]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Calculate next version
        id: next-version
        run: |
          # Get the latest tag (default to v1.0.0 if none exists)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          
          # If no tags exist yet, start with v1.0.1
          if [ "$LATEST_TAG" = "v1.0.0" ] && ! git rev-parse v1.0.0 >/dev/null 2>&1; then
            NEW_TAG="v1.0.1"
          else
            # Parse the latest tag
            VERSION=${LATEST_TAG#v}
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            # Default bump type is patch
            BUMP_TYPE="patch"
            
            # Check commit messages for bump type hints
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"%s")
            
            if echo "$COMMITS" | grep -qiE '^(feat|feature)[(:]'; then
              BUMP_TYPE="minor"
            fi
            
            if echo "$COMMITS" | grep -qiE '^BREAKING CHANGE:|^[^:]+!:'; then
              BUMP_TYPE="major"
            fi
            
            # Bump version based on type
            case $BUMP_TYPE in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              patch)
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
          echo "Next version: $NEW_TAG"

      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.next-version.outputs.new_tag }}"
          git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"
          echo "Successfully created and pushed tag: $NEW_TAG"
